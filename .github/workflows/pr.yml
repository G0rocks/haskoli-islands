name: Pull request
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
on:
  pull_request:
    branches: [main, conda]
    types: [opened, synchronize, labeled]
    paths:
      - "projects/**"
      - "cli/**"
      - ".github/**"
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo ${{ github.head_ref }}
          slug=$(./.github/slugify.sh ${{ github.head_ref || github.ref_name }})
          echo "BRANCH_SLUG=$slug" >> $GITHUB_ENV
      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          # miniforge-variant: Mambaforge
          # miniforge-version: latest
          # use-mamba: true
          auto-update-conda: false
          python-version: 3.10.10
          channels: conda-forge,defaults
          mamba-version: "*"
          channel-priority: true
          use-mamba: true
          environment-file: environment.yml
          activate-environment: edbook
      # TODO: needs work
      # - name: Check for Conda cache
      #   id: conda-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/conda_pkgs_dir
      #     key: conda-${{ runner.os }}-${{hashFiles('environment.yml')}}
      # - name: Conda activate
      #   # if: steps.conda-cache.outputs.cache-hit != 'true'
      #   run: |
      #     mamba env update -n edbook -f environment.yml
      # - uses: conda-incubator/setup-miniconda@v2
      #   with:
      #     miniforge-variant: Mambaforge
      #     miniforge-version: latest
      #     activate-environment: edbook
      #     use-mamba: true
      #     environment-file: environment.yml
      #     python-version: 3.10.10
      #     use-only-tar-bz2: true
      # - run: |
      #     conda activate edbook
      #     conda info
      #     conda list
      - name: ðŸš§ Build all (pr)
        # if: github.event_name == 'pull_request' && github.event.label.name == 'build-all'
        id: build-all
        run: |
          make build-all
      - name: ðŸ“‚ Prepare pages for feature deployment
        run: |
          mv _build/forsida/* _build/
          mkdir -p dist/${{ env.BRANCH_SLUG }}
          mv _build/* dist/${{ env.BRANCH_SLUG }}/
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: dist
      - name: ðŸ“‚ Deploy feature to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        with:
          preview: true

  # build-all:
  #   needs: [setup]
  #   name: Deploy feature
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: ðŸš§ Build affected (pr)
  #       if: github.event_name == 'pull_request' && github.event.label.name != 'build-all'
  #       id: build-affected
  #       run: |
  #         source .venv/bin/activate
  #         poetry --version
  #         ./.github/build-affected.sh ${{ github.event.pull_request.base.sha }} ${GITHUB_SHA}

  #     - name: ðŸš§ Build all (pr)
  #       if: github.event_name == 'pull_request' && github.event.label.name == 'build-all'
  #       id: build-all
  #       run: |
  #         source .venv/bin/activate
  #         poetry --version
  #         make build-all

  #     # - name: ðŸ“‚ Sync files
  #     #   uses: SamKirkland/FTP-Deploy-Action@4.3.3
  #     #   with:
  #     #     server: ${{ secrets.OK_FTP_IP_ADDRESS }}
  #     #     username: ${{ secrets.OK_FTP_USER }}
  #     #     password: ${{ secrets.OK_FTP_PASSWORD }}
  #     #     local-dir: ${{ github.workspace }}/_build/
  #     #     dry-run: false
  #     #     server-dir: "~/public_html/staging/edbook/${{ github.head_ref }}/"
  #     - name: configure aws credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::755547062946:role/edbook-github-deployer
  #         role-session-name: github-deploy
  #         aws-region: ${{ env.AWS_REGION }}
  #     - name: ðŸ“‚ Sync files to s3
  #       run: |
  #         aws s3 sync _build s3://${{ env.BUCKET_NAME }}/staging/edbook/${{ github.head_ref }} --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate
  #     - name: ðŸ“‚ prepare files for Github pages
  #       run: |
  #         mv _build/forsida/* _build/
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v3
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v1
  #       with:
  #         path: "_build"
  #     - name: ðŸ“‚ Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v1

  # announce-affected:
  #   name: Announce affected on PR
  #   runs-on: ubuntu-20.04
  #   if: github.event.action == 'opened'
  #   steps:
  #     - name: Find Comment
  #       uses: peter-evans/find-comment@v2
  #       id: fc
  #       with:
  #         issue-number: ${{ github.event.pull_request.number }}
  #         comment-author: "github-actions[bot]"
  #         body-includes: Affected projects

  #     - name: Create comment
  #       if: steps.fc.outputs.comment-id == ''
  #       uses: peter-evans/create-or-update-comment@v2
  #       with:
  #         issue-number: ${{ github.event.pull_request.number }}
  #         body: |
  #           This comment was written by a bot!
  #         reactions: rocket

  #     - name: Update comment
  #       if: steps.fc.outputs.comment-id != ''
  #       uses: peter-evans/create-or-update-comment@v2
  #       with:
  #         comment-id: ${{ steps.fc.outputs.comment-id }}
  #         body: |
  #           This comment has been updated!
  #         reactions: hooray

  notify-discord-pr:
    name: Notify Discord (open PR)
    runs-on: ubuntu-20.04
    needs: [setup]
    if: github.event.action == 'opened'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Notify open PR
        run: |
          content_title="NÃ½tt PR opnaÃ°"
          title="${{ github.event.pull_request.title }}"
          color=2061822
          description="${{ github.event.pull_request.body }}"
          url=${{ github.event.pull_request.html_url }}
          author_name=${{ github.event.pull_request.user.login}}
          author_url=${{ github.event.pull_request.user.url}}
          author_avatar=${{ github.event.pull_request.user.avatar_url}}
          branch=${{ github.head_ref }}

          payload=$(cat <<EOF
          {
            "content": "$content_title",
            "avatar_url": "https://www.shareicon.net/data/128x128/2015/08/28/92005_social-media_512x512.png",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "url": "$url",
                "color": "$color",
                "fields": [
                  "name": "url",
                  "value": "[SkoÃ°a Ã¡ edbook](https://edbook.hi.is/staging/edbook/${branch})"
                ]
                "author": {
                  "name": "$author_name",
                  "url": "$author_url",
                  "icon_url": "$author_avatar"
                }
              }
            ]
          }
          EOF
          )
          ./.github/discord.sh  \
            -w ${{ secrets.DISCORD_WEBHOOK }} \
            -c "$payload"

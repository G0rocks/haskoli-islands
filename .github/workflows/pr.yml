name: edbook
env:
  SSH_USER: ${{ secrets.EDBOOK_SSH_USER }}
  SSH_KEY: ${{ secrets.EDBOOK_SSH_KEY }}
  SSH_HOST: ${{ secrets.EDBOOK_SSH_HOST }}
  BUCKET_NAME: "edbook-dev"
  AWS_REGION: "eu-west-1"
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, closed]
    paths:
      - "src/**"
      - "cli/**"
      - ".github/**"
  # push:
  #   paths:
  #     - 'src/**'
  #     - 'cli/**'
  #     - '.github/**'
  #   branches-ignore:
  #     - main
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.extract_branch.outputs.BRANCH_NAME }}
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo "{BRANCH_NAME}={$(echo ${GITHUB_REF#refs/heads/})}" >> $GITHUB_OUTPUT
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.2.1"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  build-all:
    needs: [setup]
    name: Build and deploy feature release
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.2.1"
          virtualenvs-create: true
          virtualenvs-in-project: true
      # - name: Configure SSH
      #   run: |
      #     echo "#### Creating ~/.ssh/config from secrets ####"
      #     mkdir -p ~/.ssh/
      #     echo "$SSH_KEY" > ~/.ssh/staging.key
      #     chmod 600 ~/.ssh/staging.key
      #     cat >>~/.ssh/config <<END
      #     Host staging
      #       HostName $SSH_HOST
      #       User $SSH_USER
      #       IdentityFile ~/.ssh/staging.key
      #       StrictHostKeyChecking no
      #     END
      # - name: Test SSH connection
      #   run: |
      #     ssh -o BatchMode=yes -o ConnectTimeout=5 staging echo ok 2>&1

      # - name: Deploy branch
      #   id: deploy-branch
      #   if: github.event.action == 'synchronize' || github.event.action == 'opened'
      #   run: |
      #     ./.github/deploy.sh ${{ github.workspace }} "~/public_html" "staging/edbook/${{ github.head_ref }}"

      - name: ðŸš§ Build affected (pr)
        if: github.event_name == 'pull_request'
        id: build-affected
        run: |
          source .venv/bin/activate
          poetry --version
          ./.github/build-affected.sh ${{ github.event.pull_request.base.sha }} ${GITHUB_SHA}

      # - name: ðŸ“‚ Sync files
      #   uses: SamKirkland/FTP-Deploy-Action@4.3.3
      #   with:
      #     server: ${{ secrets.OK_FTP_IP_ADDRESS }}
      #     username: ${{ secrets.OK_FTP_USER }}
      #     password: ${{ secrets.OK_FTP_PASSWORD }}
      #     local-dir: ${{ github.workspace }}/_build/
      #     dry-run: false
      #     server-dir: "~/public_html/staging/edbook/${{ github.head_ref }}/"
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::755547062946:role/edbook-github-deployer
          role-session-name: github-deploy
          aws-region: ${{ env.AWS_REGION }}
      - name: ðŸ“‚ Sync files to s3
        run: |
          aws s3 sync _build s3://${{ env.BUCKET_NAME }}/staging/edbook/${{ github.head_ref }} --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "_build"
      - name: ðŸ“‚ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  # announce-affected:
  #   name: Announce affected on PR
  #   runs-on: ubuntu-20.04
  #   if: github.event.action == 'opened'
  #   steps:
  #     - name: Find Comment
  #       uses: peter-evans/find-comment@v2
  #       id: fc
  #       with:
  #         issue-number: ${{ github.event.pull_request.number }}
  #         comment-author: "github-actions[bot]"
  #         body-includes: Affected projects

  #     - name: Create comment
  #       if: steps.fc.outputs.comment-id == ''
  #       uses: peter-evans/create-or-update-comment@v2
  #       with:
  #         issue-number: ${{ github.event.pull_request.number }}
  #         body: |
  #           This comment was written by a bot!
  #         reactions: rocket

  #     - name: Update comment
  #       if: steps.fc.outputs.comment-id != ''
  #       uses: peter-evans/create-or-update-comment@v2
  #       with:
  #         comment-id: ${{ steps.fc.outputs.comment-id }}
  #         body: |
  #           This comment has been updated!
  #         reactions: hooray

  notify-discord-pr:
    name: Notify Discord (open PR)
    runs-on: ubuntu-20.04
    needs: [build-all]
    if: github.event.action == 'opened'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Notify open PR
        run: |
          content_title="NÃ½tt PR opnaÃ°"
          title="${{ github.event.pull_request.title }}"
          color=2061822
          description="${{ github.event.pull_request.body }}"
          url=${{ github.event.pull_request.html_url }}
          author_name=${{ github.event.pull_request.user.login}}
          author_url=${{ github.event.pull_request.user.url}}
          author_avatar=${{ github.event.pull_request.user.avatar_url}}
          branch=${{ github.head_ref }}

          payload=$(cat <<EOF
          {
            "content": "$content_title",
            "avatar_url": "https://www.shareicon.net/data/128x128/2015/08/28/92005_social-media_512x512.png",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "url": "$url",
                "color": "$color",
                "fields": [
                  "name": "url",
                  "value": "[SkoÃ°a Ã¡ edbook](https://edbook.hi.is/staging/edbook/${branch})"
                ]
                "author": {
                  "name": "$author_name",
                  "url": "$author_url",
                  "icon_url": "$author_avatar"
                }
              }
            ]
          }
          EOF
          )
          ./.github/discord.sh  \
            -w ${{ secrets.DISCORD_WEBHOOK }} \
            -c "$payload"

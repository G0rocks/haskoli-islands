name: edbook
env:
  SSH_USER: ${{ secrets.EDBOOK_SSH_USER }}
  SSH_KEY: ${{ secrets.EDBOOK_SSH_KEY }}
  SSH_HOST: ${{ secrets.EDBOOK_SSH_HOST }}
  BUCKET_NAME: "edbook-dev"
  AWS_REGION: "eu-west-1"
permissions:
  id-token: write
  contents: read
on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "cli/**"
      - ".github/**"
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.extract_branch.outputs.BRANCH_NAME }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.2.1"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  build-all:
    needs: [setup]
    name: Build and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.2.1"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: üèóÔ∏è Build
        id: build
        run: |
          source .venv/bin/activate
          poetry --version
          ./.github/build-affected.sh ${{ github.event.base_ref }} ${{ github.event.before }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::755547062946:role/edbook-github-deployer
          role-session-name: github-deploy
          aws-region: ${{ env.AWS_REGION }}
      - name: üìÇ Sync files to s3
        run: |
          aws s3 sync _build/forsida/ s3://${{ env.BUCKET_NAME }}/forsida --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate
          aws s3 sync _build s3://${{ env.BUCKET_NAME }}/ --exclude "_build/forsida" --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate

  notify-discord-pr:
    name: Notify Discord (open PR)
    runs-on: ubuntu-20.04
    if: github.event.action == 'opened'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Notify open PR
        run: |
          content_title="N√Ωtt PR opna√∞"
          title="${{ github.event.pull_request.title }}"
          color=2061822
          description="${{ github.event.pull_request.body }}"
          url=${{ github.event.pull_request.html_url }}
          author_name=${{ github.event.pull_request.user.login}}
          author_url=${{ github.event.pull_request.user.url}}
          author_avatar=${{ github.event.pull_request.user.avatar_url}}
          branch=${{ github.head_ref }}

          payload=$(cat <<EOF
          {
            "content": "$content_title",
            "avatar_url": "https://www.shareicon.net/data/128x128/2015/08/28/92005_social-media_512x512.png",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "url": "$url",
                "color": "$color",
                "fields": [
                  "name": "url",
                  "value": "[Sko√∞a √° edbook](https://edbook.hi.is/staging/edbook/${branch})"
                ]
                "author": {
                  "name": "$author_name",
                  "url": "$author_url",
                  "icon_url": "$author_avatar"
                }
              }
            ]
          }
          EOF
          )
          ./.github/discord.sh  \
            -w ${{ secrets.DISCORD_WEBHOOK }} \
            -c "$payload"
  notify-discord-merge:
    needs: [build-all]
    name: Notify Discord (merged to main)
    runs-on: ubuntu-20.04
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Notify merge
        run: |
          content_title="N√Ω √∫tg√°fa er kominn √≠ lofti√∞ üéâ"
          title="${{ github.base_ref }} ‚Ü©Ô∏è ${{ github.head_ref }}"
          color=32768
          description="${{ github.event.pull_request.body }}"
          url=${{ github.event.pull_request.html_url }}
          author_name=${{ github.event.pull_request.user.login}}
          author_url=${{ github.event.pull_request.user.url}}
          author_avatar=${{ github.event.pull_request.user.avatar_url}}
          branch=${{ github.head_ref }}

          payload=$(cat <<EOF
          {
            "content": "$content_title",
            "avatar_url": "https://www.shareicon.net/data/128x128/2015/08/28/92005_social-media_512x512.png",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "url": "$url",
                "color": $color,
                "fields": [
                  "name": "url",
                  "value": "[Sko√∞a √° edbook](https://edbook.hi.is)"
                ]
                "author": {
                  "name": "$author_name",
                  "url": "$author_url",
                  "icon_url": "$author_avatar"
                }
              }
            ]
          }
          EOF
          )
          ./.github/discord.sh  \
            -w ${{ secrets.DISCORD_WEBHOOK }} \
            -c "$payload"
  notify-discord-build-failed:
    needs: [build-all, setup]
    if: always() && needs.build-all.result == 'failure' && github.event_name == 'push'
    name: Notify Discord (build failed)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Notify build or deploy failed
        run: |
          workflow_url="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          content_title="Eitthva√∞ f√≥r √∫rskei√∞is ‚ò†Ô∏è"
          title="${{ env.BRANCH_NAME }}"
          color=16711680
          description="Ekki t√≥kst a√∞ byggja og/e√∞a deploya branchinu _${{ env.BRANCH_NAME }}_"
          url="$workflow_url"
          author_name=${{ github.event.push.sender.login}}
          author_url=${{ github.event.push.sender.url}}
          author_avatar=${{ github.event.push.sender.avatar_url}}

          payload=$(cat <<EOF
          {
            "content": "$content_title",
            "avatar_url": "https://www.shareicon.net/data/128x128/2015/08/28/92005_social-media_512x512.png",
            "embeds": [
              {
                "title": "$title",
                "description": "$description",
                "url": "$url",
                "color": $color,
                "author": {
                  "name": "$author_name",
                  "url": "$author_url",
                  "icon_url": "$author_avatar"
                }
              }
            ]
          }
          EOF
          )
          ./.github/discord.sh  \
            -w ${{ secrets.DISCORD_WEBHOOK }} \
            -c "$payload"
